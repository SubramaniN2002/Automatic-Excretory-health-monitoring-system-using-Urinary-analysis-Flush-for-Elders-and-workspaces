
//ARDUINO
 //-----------
 //SDA D10
 //SCK D13
 //MOSI D11
 //MISO D12
 //GND GND
 //RST D9
 //3V3 3V3

//NODE
//-----------
 //SDA D8
 //SCK D5
 //MOSI D7
 //MISO D6
 //GND GND
 //RST D0
 //3V3 3V3
//http://arduino.esp8266.com/stable/package_esp8266com_index.json


#include <ESP8266WiFi.h>
#include "ThingSpeak.h" // always include thingspeak header file after other header files and custom macros
char ssid[] = "IOT";   // your network SSID (name) 
char pass[] = "1234567890";   // your network password
WiFiClient  client;
unsigned long myChannelNumber = 341679;
const char * myWriteAPIKey = "RWTDHCD8WBH4V8SS";
float h=0;
    float t=0;
    float f=0;
int ramcount=0;
int kumarcount=0;
//LCD HEADER
#include <Wire.h> 
#include <LiquidCrystal_I2C.h>
LiquidCrystal_I2C lcd(0x27, 16, 2);

 //RFID HEADER
 //D6 44 12 1A
 //D6 82 64 1A
#include <SPI.h>
#include <MFRC522.h>
#define SS_PIN 15
#define RST_PIN 16
MFRC522 mfrc522(SS_PIN, RST_PIN);   // Create MFRC522 instance.
String myStatus = "";
const int BUZZER = 2;
float salt=0;
int fine=0;


#include "DHT.h"
#define DHTPIN 2     // esp8266 D2 pin map as 4 in Arduino IDE
#define DHTTYPE DHT11   // there are multiple kinds of DHT sensors
DHT dht(DHTPIN, DHTTYPE);


void setup() 
{
  Serial.begin(9600);   // Initiate a serial communication
  dht.begin();
  WiFi.mode(WIFI_STA); 
  ThingSpeak.begin(client);  // Initialize ThingSpeak
  
  SPI.begin();      // Initiate  SPI bus
  mfrc522.PCD_Init();   // Initiate MFRC522
  
  lcd.begin();  
  
   pinMode(BUZZER,OUTPUT);
   digitalWrite(BUZZER,LOW);
   lcd.setCursor(0,0);
   lcd.print(" IoT BASED BODY "); // Start Printing
   lcd.setCursor(0,1);
   lcd.print("HYDRATIN TRACKNG"); // Start Printing
   delay(3000);
  
  if(WiFi.status() != WL_CONNECTED)
  {
   Serial.print("Attempting to connect to SSID: ");
// Serial.println(SECRET_SSID);
   lcd.setCursor(0,0);
   lcd.print("  CONNECTING TO "); // Start Printing
   lcd.setCursor(0,1);
   lcd.print("WIFI NETWORK... "); // Start Printing
    while(WiFi.status() != WL_CONNECTED)
    {
      WiFi.begin(ssid, pass);  // Connect to WPA/WPA2 network. Change this line if using open or WEP network
      Serial.print(".");
     
      delay(5000);     
    } 
    lcd.setCursor(0,0);
   lcd.print("  CONNECTING TO "); // Start Printing
   lcd.setCursor(0,1);
   lcd.print(" NETWORK SUCCESS"); // Start Printing
    Serial.print("CONNECTED TO WIFI NETWORK");
    delay(3000);
  }
  
    lcd.setCursor(0,0);
   lcd.print("  SCANNING FOR  "); // Start Printing
   lcd.setCursor(0,1);
   lcd.print("  VALID CARD!!  "); // Start Printing
  Serial.println("Approximate your card to the reader...");
  Serial.println();

}
void loop() 
{
    lcd.setCursor(0,0);
   lcd.print("  SCANNING FOR  "); // Start Printing
   lcd.setCursor(0,1);
   lcd.print("  VALID CARD!!  "); // Start Printing
  // Look for new cards
  if ( ! mfrc522.PICC_IsNewCardPresent()) 
  {
    return;
  }
  // Select one of the cards
  if ( ! mfrc522.PICC_ReadCardSerial()) 
  {
    return;
  }
  //Show UID on serial monitor
  Serial.print("UID tag :");
  String content= "";
  byte letter;
  for (byte i = 0; i < mfrc522.uid.size; i++) 
  {
     Serial.print(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " ");
     Serial.print(mfrc522.uid.uidByte[i], HEX);
     content.concat(String(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " "));
     content.concat(String(mfrc522.uid.uidByte[i], HEX));
  }
  Serial.println();
  Serial.print("Message : ");
  content.toUpperCase();
  delay(1000);
  if (content.substring(1) == "1D 13 65 A0") //change here the UID of the card/cards that you want to give access
  {
    ramcount+=1;
    Serial.println("Authorized access");
    Serial.println();
   lcd.setCursor(0,0);
   lcd.print("   WELCOME RAM  "); // Start Printing
   lcd.setCursor(0,1);
   lcd.print("                "); // Start Printing
   delay(3000);
   lcd.setCursor(0,0);
   lcd.print(" ANALYZING THE  "); // Start Printing
   lcd.setCursor(0,1);
   lcd.print("  URIN SAMPLE!  "); // Start Printing
    delay(3000);
       h = dht.readHumidity();
    // Read temperature as Celsius (the default)
      t = dht.readTemperature();
    // Read temperature as Fahrenheit (isFahrenheit = true)
      f = dht.readTemperature(true);

    // Check if any reads failed and exit early (to try again).
    if (isnan(h) || isnan(t) || isnan(f)) 
    {
      Serial.println("Failed to read from DHT sensor!");
   
      return;
    }

    // Compute heat index in Fahrenheit (the default)
    float hif = dht.computeHeatIndex(f, h);
    // Compute heat index in Celsius (isFahreheit = false)
    float hic = dht.computeHeatIndex(t, h, false);

    salt=analogRead(A0);
    salt*=100;
    salt/=1023;
   lcd.setCursor(0,0);
   lcd.print("TEMPERATURE:"); // Start Printing
   lcd.print(t);
   lcd.print("*C ");
   lcd.setCursor(0,1);
   lcd.print("SALT:"); // Start Printing
   lcd.print(salt);
   lcd.print("% C:");
   lcd.print(ramcount);
   lcd.print("Nos     ");
delay(3000);
 if(salt>75)
 {
   lcd.setCursor(0,0);
   lcd.print("HIGHSALT CONTENT"); // Start Printing
   lcd.setCursor(0,1);
   lcd.print("DRINK MORE WATER"); // Start Printing
   delay(3000);
 }
          ThingSpeak.setField(7, t);
          ThingSpeak.setField(8, salt);
          //ThingSpeak.setField(3, T);
         
          // set the status
          ThingSpeak.setStatus(myStatus); 
          // write to the ThingSpeak channel
          int x = ThingSpeak.writeFields(myChannelNumber, myWriteAPIKey);
          if(x == 200)
          {
            Serial.println("Channel update successful.");
          }
          else
          {
            Serial.println("Problem updating channel. HTTP error code " + String(x));
          }
 

    
  }
 if (content.substring(1) == "5D 14 65 A0") //change here the UID of the card/cards that you want to give access
  {
    kumarcount+=1;
    Serial.println("Authorized access");
    Serial.println();
   lcd.setCursor(0,0);
   lcd.print("  WELCOME KUMAR "); // Start Printing
   lcd.setCursor(0,1);
   lcd.print("                "); // Start Printing
   delay(3000);
   lcd.setCursor(0,0);
   lcd.print(" ANALYZING THE  "); // Start Printing
   lcd.setCursor(0,1);
   lcd.print("  URIN SAMPLE!  "); // Start Printing
    delay(3000);
       h = dht.readHumidity();
    // Read temperature as Celsius (the default)
      t = dht.readTemperature();
    // Read temperature as Fahrenheit (isFahrenheit = true)
      f = dht.readTemperature(true);

    // Check if any reads failed and exit early (to try again).
    if (isnan(h) || isnan(t) || isnan(f)) 
    {
      Serial.println("Failed to read from DHT sensor!");
   
      return;
    }

    // Compute heat index in Fahrenheit (the default)
    float hif = dht.computeHeatIndex(f, h);
    // Compute heat index in Celsius (isFahreheit = false)
    float hic = dht.computeHeatIndex(t, h, false);

    salt=analogRead(A0);
    salt*=100;
    salt/=1023;
   lcd.setCursor(0,0);
   lcd.print("TEMPERATURE:"); // Start Printing
   lcd.print(t);
   lcd.print("*C ");
   lcd.setCursor(0,1);
   lcd.print("SALT:"); // Start Printing
   lcd.print(salt);
   lcd.print("% C:");
   lcd.print(kumarcount);
   lcd.print("Nos     ");
delay(3000);
 if(salt>75)
 {
   lcd.setCursor(0,0);
   lcd.print("HIGHSALT CONTENT"); // Start Printing
   lcd.setCursor(0,1);
   lcd.print("DRINK MORE WATER"); // Start Printing
   delay(3000);
 }

          ThingSpeak.setField(5, t);
          ThingSpeak.setField(6, salt);
          //ThingSpeak.setField(3, T);
         
          // set the status
          ThingSpeak.setStatus(myStatus); 
          // write to the ThingSpeak channel
          int x = ThingSpeak.writeFields(myChannelNumber, myWriteAPIKey);
          if(x == 200)
          {
            Serial.println("Channel update successful.");
          }
          else
          {
            Serial.println("Problem updating channel. HTTP error code " + String(x));
          }

     
    

    
  }
 else   
 {
    Serial.println(" Access denied");
    delay(3000);
  }
} 

